/* Copyright (c) 2018 EvilEye Authors. All Rights Reserved. */

syntax = "proto3";
package evileye;

import "google/protobuf/empty.proto";
import "api.proto";

message SuccessHashCalcRequest {
    string id = 1;
    string nonce = 2;
}

message SendCheckResultRequest {
    string id = 1;
    string nonce = 2;
    bool is_ok = 3;
}

message Tarekomis {
    repeated Tarekomi tarekomis = 1;
}

message SendTxRequest {
    string user_name = 1;
    string url = 2;
    string desc = 3;
    repeated string approved_user_names = 4;
}

message Tx {
    string user_name = 1;
    string url = 2;
    string desc = 3;
    repeated string approved_user_names = 4;
}

message Txs {
    repeated Tx txs = 1;
}

message HealthCheckResponse {
    string hash = 1;
}

message GetTxPoolRequest {
    string id = 1;
    }

service Internal {
    rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
    /*
        SuccessHashCalc

        ハッシュ計算が成功した際に他ノードに通知する
        成功者がid(UUIDv4)を振り、nonceとともに他ノードにBroadCastする
     */
    rpc SuccessHashCalc(SuccessHashCalcRequest)
        returns (google.protobuf.Empty);

    /*
        SendCheckResult

        N-1のノードが計算をした結果をそれぞれ自分以外にBroadCastする
        この際、idを付与することでそのidのOK, NotOKの数をそれぞれがカウントできるようにする
        それぞれがOKのカウントがしきい値を超えたら、リーダーノードからTxPoolを取得して勝手にブロックを生成する
     */
    rpc SendCheckResult(SendCheckResultRequest)
        returns (google.protobuf.Empty);

    /*
        GetTxPool

        ノードがブロック生成時にリーダーノード宛にリクエストを行う
        ここには、Approvedになった黒歴史がリストで詰まっている

        リーダーノードはTxPoolの内容をすべて返す
     */
    rpc GetTxPool(GetTxPoolRequest)
        returns (Txs);

    /*
        SendTx

        ApproveになったTarekomiを投げる. (リーダーノードのみ!)
     */
    rpc SendTx(SendTxRequest) returns (google.protobuf.Empty);
}
